include "../rew_type.zf".
rewrite[name "LabelCol"] forall (A B C : point). Col A B C <=> Bet A B C || Bet B C A || Bet C A B.
rewrite[name "LabelCong_3"] forall (A B C A1 B1 C1 : point). Cong_3 A B C A1 B1 C1 <=> Cong A B A1 B1 && Cong A C A1 C1 && Cong B C B1 C1.
rewrite[name "LabelLeA"] forall (A B C D E F : point). LeA A B C D E F <=> (exists (P : point). InAngle P D E F && CongA A B C D E P).
rewrite[name "LabelPar"] forall (A B C D : point). Par A B C D <=> Par_strict A B C D || (A != B && C != D && Col A C D && Col B C D).
rewrite[name "LabelPar_strict"] forall (A B C D : point). Par_strict A B C D <=> A != B && C != D && Coplanar A B C D && ~(exists (X : point). Col X A B && Col X C D).
#bet_col
assert[name "Labelbet_col"] forall (A B C : point). Bet A B C => Col A B C.
#bet_conga_bet
assert[name "Labelbet_conga_bet"] forall (A B C A1 B1 C1 : point). Bet A B C => CongA A B C A1 B1 C1 => Bet A1 B1 C1.
#between_identity
assert[name "Labelbetween_identity"] forall (A B : point). Bet A B A => A=B.
#between_symmetry
assert[name "Labelbetween_symmetry"] forall (A B C : point). Bet A B C => Bet C B A.
#between_trivial
assert[name "Labelbetween_trivial"] forall (A B : point). Bet A B B.
#col_permutation_1
assert[name "Labelcol_permutation_1"] forall (A B C : point). Col A B C => Col B C A.
#col_permutation_4
assert[name "Labelcol_permutation_4"] forall (A B C : point). Col A B C => Col B A C.
#col_permutation_5
assert[name "Labelcol_permutation_5"] forall (A B C : point). Col A B C => Col A C B.
#col_trivial_1
assert[name "Labelcol_trivial_1"] forall (A B : point). Col A A B.
#cong_commutativity
assert[name "Labelcong_commutativity"] forall (A B C D : point). Cong A B C D => Cong B A D C.
#cong_symmetry
assert[name "Labelcong_symmetry"] forall (A B C D : point). Cong A B C D => Cong C D A B.
#cong_transitivity
assert[name "Labelcong_transitivity"] forall (A B C D E F : point). Cong A B C D => Cong C D E F => Cong A B E F.
#conga_sym
assert[name "Labelconga_sym"] forall (A B C A1 B1 C1 : point). CongA A B C A1 B1 C1 => CongA A1 B1 C1 A B C.
#eq_dec_points
assert[name "Labeleq_dec_points"] forall (A B : point). A=B || A!=B.
#l7_3
assert[name "Labell7_3"] forall (M A : point). Midpoint M A A => M=A.
#l8_2
assert[name "Labell8_2"] forall (A B C : point). Per A B C => Per C B A.
#out_trivial
assert[name "Labelout_trivial"] forall (P A : point). A!=P => Out P A A.
#symmetric_point_uniqueness
assert[name "Labelsymmetric_point_uniqueness"] forall (A P P1 P2 : point). Midpoint P A P1 => Midpoint P A P2 => P1=P2.
goal forall (A B C C1 D P : point). Per A B C => Midpoint P C1 D => Midpoint A C1 C => Midpoint B D C => Per B A P.